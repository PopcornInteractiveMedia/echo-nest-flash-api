<?xml version="1.0" encoding="utf-8"?>

<!--

This example uses the Echo Nest API to remix the track by altering the
arrangement of the bars of the track.

The remixes are based on the examples distributed with the Echo Nest remix API.

This example depends on three additional libraries:

  as3corelib for MD5 calculation
  http://code.google.com/p/as3corelib/

  MP3FileReferenceLoaderLib to load sound files directly from a FileReference
  http://www.flexiblefactory.co.uk/flexible/?p=46

  com.ryanberdeen.audio for the actual remixing
  http://github.com/also/flash-audio/tree/master

-->

<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="init();">
  <mx:Panel title="Remix Demo" width="100%" paddingTop="10" paddingRight="10" paddingBottom="10" paddingLeft="10">
    <mx:HBox paddingBottom="10">
      <mx:Button id="browseButton" label="Choose a songâ€¦" click="chooseFile();"/>
      <mx:CheckBox id="calculateMd5checkBox" label="Check for analysis before uploading" selected="true"/>
    </mx:HBox>
    <mx:ProgressBar id="progressBar" mode="manual" label="" width="100%"/>
    <mx:HRule width="100%"/>
    <mx:Label text="Remix"/>
    <mx:ComboBox id="remixComboBox" width="100" dataProvider="{remixes}" close="remixComboBoxCloseHandler(event);" enabled="false"/>
    <mx:Button id="playButton" label="Play" enabled="false" click="togglePlayPause();"/>
    <mx:ProgressBar id="positionProgressBar" barColor="0xFF0000" mode="manual" label="" width="100%" labelPlacement="right" labelWidth="0" horizontalGap="0"/>
    <mx:TextArea id="logTextArea" width="100%" height="200" editable="false" valueCommit="logTextArea.verticalScrollPosition=logTextArea.maxVerticalScrollPosition"/>
  </mx:Panel>

  <mx:Script><![CDATA[
    import com.adobe.crypto.MD5Stream;
    import com.ryanberdeen.echonest.api.v3.EchoNestError;
    import com.ryanberdeen.echonest.api.v3.EchoNestErrorEvent;
    import com.ryanberdeen.echonest.api.v3.track.AnalysisEvent;
    import com.ryanberdeen.echonest.api.v3.track.AnalysisLoader;
    import com.ryanberdeen.echonest.api.v3.track.TrackApi;
    import com.ryanberdeen.audio.ISampleSource;
    import com.ryanberdeen.audio.DiscontinuousSampleSource;
    import com.ryanberdeen.audio.SampleRange;
    import com.ryanberdeen.audio.SampleSourcePlayer;
    import com.ryanberdeen.audio.SoundSampleSource;

    import flash.events.Event;
    import flash.events.IOErrorEvent;
    import flash.events.SecurityErrorEvent;
    import flash.media.Sound;
    import flash.net.FileReference;
    import flash.net.URLLoader;
    import flash.utils.Timer;

    import mx.collections.ArrayCollection;

    import org.audiofx.mp3.MP3FileReferenceLoader;
    import org.audiofx.mp3.MP3SoundEvent;

    [Bindable]
    public var remixes:ArrayCollection = new ArrayCollection([
      {label: 'One', data: remixOne},
      {label: 'Reverse', data: remixReverse},
      {label: 'Original', data: remixOriginal}
    ]);

    private var trackApi:TrackApi = new TrackApi();

    private var fileReference:FileReference;
    private var mp3Loader:MP3FileReferenceLoader;
    private var sound:Sound;

    private var md5LoopTimer:Timer;
    private var md5Stream:MD5Stream;
    private var md5Bytes:ByteArray;

    private var trackId:String;
    private var trackMd5:String;

    private var analysisLoader:AnalysisLoader;

    private var bars:Array;
    private var beats:Array;

    private var remixPlayer:SampleSourcePlayer;
    private var playing:Boolean;
    private var positionUpdateTimer:Timer;

    private function init():void {
      trackApi.apiKey = YOUR_API_KEY;
      log('<b>loaded remix demo</b>');

      positionUpdateTimer = new Timer(10);
      positionUpdateTimer.addEventListener('timer', positionUpdateTimerHandler);
    }

    private function log(o:Object):void {
      logTextArea.htmlText += o + "\n";
    }

    private function setStatus(status:String, indeterminate:Boolean = false):void {
      progressBar.label = status;
      progressBar.indeterminate = indeterminate;
      if (indeterminate) {
        progressBar.mode = 'event';
      }
    }

    private function clearStatus():void {
      progressBar.label = '';
      progressBar.indeterminate = false;
      progressBar.mode = 'manual';
    }

    private function resetAnalysis():void {
      bars = null;
      beats = null;
      playButton.enabled = false;
      remixComboBox.enabled = false;
      if (md5LoopTimer != null) {
        md5LoopTimer.stop();
        md5LoopTimer = null;
      }

      sound = null;

      resetPlayer();
    }

    private function resetPlayer():void {
      if (remixPlayer != null) {
        remixPlayer.stop();

        remixPlayer = null;
      }
      positionUpdateTimer.stop();
    }

    private function chooseFile():void {
      log('<b>choosing file...</b>');
      resetAnalysis();
      fileReference = new FileReference();
      fileReference.addEventListener(Event.SELECT, function(e:Event):void {
        log('selected file ' + fileReference.name);
        loadSound(); // the mp3 loaded will load the file data
      });
      fileReference.browse();
    }

    private function loadSound():void {
      log('<b>loading sound...</b>');
      mp3Loader = new MP3FileReferenceLoader();
      mp3Loader.addEventListener(Event.COMPLETE, handleSoundLoadComplete);
      mp3Loader.getSound(fileReference);
    }

    private function handleSoundLoadComplete(e:MP3SoundEvent):void {
      log('sound loaded');
      mp3Loader.removeEventListener(Event.COMPLETE, handleSoundLoadComplete);
      sound = e.sound;

      if (calculateMd5checkBox.selected) {
        calculateMd5();
      }
      else {
        uploadFile();
      }
    }

    private function calculateMd5():void {
      log('<b>calculating md5...</b>');
      md5Stream = new MD5Stream();
      fileReference.data.position = 0;
      md5Bytes = new ByteArray();
      setStatus('Calculate MD5');
      md5LoopTimer = new Timer(1);
      md5LoopTimer.addEventListener('timer', function md5LoopIterate(e:Event):void {
        if (fileReference.data.bytesAvailable == 0) {
          trackMd5 = md5Stream.complete();
          md5LoopTimer.stop();
          handleCalculateMd5Complete();
          return;
        }

        var length:int = Math.min(51200, fileReference.data.bytesAvailable);
        md5Bytes.length = length;
        fileReference.data.readBytes(md5Bytes, 0, length);
        md5Stream.update(md5Bytes);
        progressBar.setProgress(fileReference.data.position, fileReference.data.length);
      });
      md5LoopTimer.start();
    }

    private function handleCalculateMd5Complete():void {
      log('md5 calculated ' + trackMd5);
      md5Stream = null;
      md5Bytes = null;
      setStatus('Check for analysis', true);
      loadAnalysis({md5: trackMd5});
    }

    private function uploadFile():void {
      log('<b>uploading track...</b>');
      setStatus('Upload');
      trackApi.uploadFileReference({file: fileReference, wait: 'N'}, {
        onResponse: function(track:Object):void {
          trackId = track.id;
          log('uploaded track ' + track.id);
          setStatus('Wait for analysis', true);
          loadAnalysis({id: track.id});
        },
        onProgress: function(e:ProgressEvent):void {
          progressBar.setProgress(e.bytesLoaded, e.bytesTotal);
        },
        onEchoNestError: function(error:EchoNestError):void {
          log('error ' + error.code + ': ' + error.description);
        },
        onError: errorHandler
      });
    }

    private function loadAnalysis(parameters:Object):void {
      log('<b>loading analysis...</b>');
      analysisLoader = new AnalysisLoader(trackApi);
      analysisLoader.addEventListener(AnalysisEvent.UNKNOWN, analysisUnknownHandler);
      analysisLoader.addEventListener(AnalysisEvent.ERROR, analysisErrorHandler);
      analysisLoader.addEventListener(AnalysisEvent.COMPLETE, analysisCompleteHandler);
      analysisLoader.addEventListener(Event.COMPLETE, analysisLoaderCompleteHandler);
      analysisLoader.addEventListener(EchoNestErrorEvent.ECHO_NEST_ERROR, echoNestErrorEventHandler);
      analysisLoader.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);
      analysisLoader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, errorHandler);
      analysisLoader.load(parameters);
    }

    private function echoNestErrorEventHandler(error:EchoNestErrorEvent):void {
      log('error ' + error.code + ': ' + error.message);
      clearStatus();
    }

    private function analysisUnknownHandler(e:Event):void {
      log('not yet analyzed');
      uploadFile();
    }

    private function analysisErrorHandler(e:Event):void {
      log('track analysis has failed. try a different track');
    }

    private function analysisCompleteHandler(e:Event):void {
      log('analysis complete');
      setStatus('Download analysis', true);
    }

    private function analysisLoaderCompleteHandler(e:Event):void {
      log('analysis loaded');
      clearStatus();

      bars = analysisLoader.analysis.bars;
      beats = analysisLoader.analysis.beats;

      clearStatus();
      preparePlayer();
    }

    private function errorHandler(e:Event):void {
      log(e.toString());
    }

    private function preparePlayer():void {
      resetPlayer();
      remixPlayer = new SampleSourcePlayer();
      remixPlayer.addEventListener(Event.SOUND_COMPLETE, playerSoundCompleteHandler);
      remixPlayer.sampleSource = remixComboBox.selectedItem.data();
      remixComboBox.enabled = true;
      playButton.enabled = true;
      playButton.label = "Play";
      playing = false;
    }

    private function playerSoundCompleteHandler(e:Event):void {
      preparePlayer();
    }

    private function remixComboBoxCloseHandler(event:Event):void {
      preparePlayer();
    }

    private function remixOne():ISampleSource {
      var beatIndex:int = 0;
      var sampleRanges:Array = [];
      for (var i:int = 0; i < bars.length; i++) {
        while (beatIndex < beats.length - 1 && beats[beatIndex].value != bars[i].value) {
          beatIndex++;
        }
        sampleRanges.push(new SampleRange(Math.round(beats[beatIndex].value * 44100), Math.round(beats[beatIndex + 1].value * 44100)));
      }

      return discontinuousRemix(sampleRanges);
    }

    private function remixReverse():ISampleSource {
      var sampleRanges:Array = [];
      for (var i:int = beats.length - 1; i > 0; i--) {
        sampleRanges.push(new SampleRange(Math.round(beats[i - 1].value * 44100), Math.round(beats[i].value * 44100)));
      }

      return discontinuousRemix(sampleRanges);
    }

    private function remixOriginal():ISampleSource {
      return new SoundSampleSource(sound);
    }

    private function discontinuousRemix(sampleRanges:Array):ISampleSource {
      var sampleSource:DiscontinuousSampleSource = new DiscontinuousSampleSource();

      sampleSource.sampleRanges = sampleRanges;
      sampleSource.sampleSource = new SoundSampleSource(sound);

      return sampleSource;
    }

    private function togglePlayPause():void {
      if (!playing) {
        play();
      }
      else {
        pause();
      }
    }

    private function play():void {
      remixPlayer.start();
      positionUpdateTimer.start();
      playButton.label = "Pause";
      playing = true;
    }

    private function pause():void {
      remixPlayer.stop();
      positionUpdateTimer.stop();
      playButton.label = "Play";
      playing = false;
    }

    private function positionUpdateTimerHandler(e:Event):void {
      positionProgressBar.setProgress(remixPlayer.sourcePosition, sound.length * 44.1);
    }
  ]]></mx:Script>
</mx:Application>
